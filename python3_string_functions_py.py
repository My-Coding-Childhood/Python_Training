# -*- coding: utf-8 -*-
"""Python3_string_functions.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gM75Dy3seyq9jTbADTxHH_ouKcy8uyaT

**STRING OPERATION.**
"""


# Revision from python2 class:

a = "Titanic"

print(type(a))

isinstance(a,str)


# How to check the length of string:

length = len(a); print(length)


# Converting uppercase/lowercase string: 

uc = a.upper(); print(uc)

lc = a.lower(); print(lc)

title = lc.title()
print(title)

"""**A sentence as a string**"""


# Assigning variables, datatype check, counting, and finding positions in a variable assigned:

sentence = "All that remains is what remains"

print(len(sentence))

isinstance(sentence,int)

print(type(sentence))

print (sentence.count('remains'))

print (sentence.count('a'))

print (sentence.count('a', 10))

print (sentence.find("remains"))

# Find from reverse
print (sentence.rfind('remains'))

# Checking for a non-existent variable returns a -1 value:
print (sentence.find("saw"))

# Remove a portion of the variable from reverse
print (sentence.rstrip("ains"))

remains = sentence.rstrip('ains')
print (remains)

# Check length of variable
dna = "AATTGGCCAA"
print (len(dna))

# Count the number of times an alphabet appears in a variable:
print (dna.count("A"))

# Find the position of first occurence:
print (dna.find("A"))

# Find position of first occurence from the reverse:
print (dna.rfind('A'))

print (dna)


# Using the slice command to extract from assigned variables depending on our positions of interest:

print ("dna[0] : ", dna[0])

print ("dna[0:5] : ", dna[0:5])

print ("dna[0:8] : ", dna[0:8])

print ("dna [2:4] :", dna [2:5])


# CONCATENATION
dna2 = "AAAA"
dna3 = dna + dna2
dna4 = dna2 + dna
print ('dna3 : ', dna3)
print ('dna4 : ', dna4)

dna5 = dna2*5
print (dna5)
print (len(dna5))
